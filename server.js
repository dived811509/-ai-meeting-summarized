const express = require("express");
const cors = require("cors");
const path = require("path");
const { OpenAI } = require("openai");
const nodemailer = require("nodemailer");
require("dotenv").config();

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(express.json({ limit: "10mb" }));
app.use(express.static(path.join(__dirname, "public")));

// OpenAI Configuration
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// Email Configuration
const transporter = nodemailer.createTransport({
  service: "gmail",
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASS,
  },
});

// Routes
app.get("/", (req, res) => {
  res.sendFile(path.join(__dirname, "public", "index.html"));
});

// Generate Summary API
app.post("/api/generate-summary", async (req, res) => {
  try {
    const { transcript, customPrompt } = req.body;

    if (!transcript) {
      return res.status(400).json({
        success: false,
        error: "Transcript is required",
      });
    }

    // Prepare the prompt
    const systemPrompt = `You are an AI assistant that creates structured summaries of meeting transcripts. 
        Create a clear, well-organized summary that includes:
        - Key discussion points
        - Decisions made
        - Action items
        - Important dates or deadlines
        
        Format the summary in a professional, easy-to-read manner.`;

    const userPrompt = customPrompt
      ? `${customPrompt}\n\nTranscript:\n${transcript}`
      : `Please summarize this meeting transcript:\n\n${transcript}`;

    const completion = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [
        { role: "system", content: systemPrompt },
        { role: "user", content: userPrompt },
      ],
      max_tokens: 1000,
      temperature: 0.7,
    });

    const summary = completion.choices[0].message.content;

    res.json({
      success: true,
      summary: summary,
    });
  } catch (error) {
    console.error("OpenAI API error:", error);
    res.status(500).json({
      success: false,
      error:
        "Failed to generate summary. Please check your API key and try again.",
    });
  }
});

// Send Email API
app.post("/api/send-email", async (req, res) => {
  try {
    const { to, subject, content } = req.body;

    if (!to || !content) {
      return res.status(400).json({
        success: false,
        error: "Recipient email and content are required",
      });
    }

    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: to,
      subject: subject || "Meeting Summary",
      html: `
                <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                    <h2 style="color: #667eea;">Meeting Summary</h2>
                    <div style="background: #f8f9fa; padding: 20px; border-radius: 8px; white-space: pre-wrap;">
                        ${content}
                    </div>
                    <p style="color: #666; font-size: 14px; margin-top: 20px;">
                        This summary was generated by AI Meeting Summarizer
                    </p>
                </div>
            `,
    };

    await transporter.sendMail(mailOptions);

    res.json({
      success: true,
      message: "Email sent successfully",
    });
  } catch (error) {
    console.error("Email error:", error);
    res.status(500).json({
      success: false,
      error: "Failed to send email. Please check your email configuration.",
    });
  }
});

// Start server
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
  console.log(`Open http://localhost:${PORT} in your browser`);
});
